name: Release Binaries

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ env.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Get Release Version
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
        
      - name: Create GitHub Release using gh CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create ${{ env.VERSION }} --draft --verify-tag --title "Release ${{ env.VERSION }}"

  build_and_upload_assets:
    name: Build and Upload Assets
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            compression_ext: tar.xz
            binary_name: axes
          - os: macos-latest
            target: x86_64-apple-darwin
            compression_ext: tar.xz
            binary_name: axes
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            compression_ext: zip
            binary_name: axes.exe

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Import GPG Signing Key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_BOT_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Define Artifact Name and Sign Binary
        shell: bash
        run: |
          VERSION="${{ needs.create_release.outputs.version }}"
          ASSET_NAME="axes-${{ matrix.target }}-${VERSION}.${{ matrix.compression_ext }}"
          
          echo "ASSET_NAME=$ASSET_NAME" >> $GITHUB_ENV
          
          BINARY_PATH="./target/${{ matrix.target }}/release/${{ matrix.binary_name }}"
          
          gpg --batch --pinentry-mode loopback --yes \
              --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              --local-user ${{ secrets.GPG_KEY_ID }} \
              --output "${BINARY_PATH}.sig" \
              --detach-sign "${BINARY_PATH}"
      
      - name: Create package (Max Compression)
        shell: bash
        run: |
          VERSION="${{ needs.create_release.outputs.version }}"
          PACKAGE_DIR="axes-${{ matrix.target }}-${VERSION}"

          mkdir -p "$PACKAGE_DIR"
          BINARY_PATH="./target/${{ matrix.target }}/release/${{ matrix.binary_name }}"
          BINARY_SIG_PATH="${BINARY_PATH}.sig"
          
          cp "$BINARY_PATH" ./"$PACKAGE_DIR"/
          cp "$BINARY_SIG_PATH" ./"$PACKAGE_DIR"/ 
          cp LICENSE ./"$PACKAGE_DIR"/
          cp README.md ./"$PACKAGE_DIR"/
          cp TECHNICAL.md ./"$PACKAGE_DIR"/
          cp GETTING_STARTED.md ./"$PACKAGE_DIR"/
          cp COMMAND.md ./"$PACKAGE_DIR"/

          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a -tzip -mx=9 "${{ env.ASSET_NAME }}" "./$PACKAGE_DIR/"
          else
            tar cJf -9 "${{ env.ASSET_NAME }}" "./$PACKAGE_DIR/"
          fi

      - name: Sign Compressed Artifact (Final Signature)
        shell: bash
        run: |
          gpg --batch --pinentry-mode loopback --yes \
              --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              --local-user ${{ secrets.GPG_KEY_ID }} \
              --output "${{ env.ASSET_NAME }}.sig" \
              --detach-sign "${{ env.ASSET_NAME }}"
          
      - name: Upload All Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          VERSION="${{ needs.create_release.outputs.version }}"
          gh release upload "$VERSION" \
            "${{ env.ASSET_NAME }}" \
            "${{ env.ASSET_NAME }}.sig"