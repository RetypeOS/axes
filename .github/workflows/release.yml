# .github/workflows/release.yml

name: Release Binaries

permissions:
  contents: write
  pull-requests: read # Needed for --generate-notes

on:
  push:
    tags:
      - 'v*'

jobs:
  # Job 1: Creates a DRAFT release and auto-generates the changelog.
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          # Fetch all history so `gh release create` can generate notes
          fetch-depth: 0

      - name: Get Release Version from Tag
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Create Draft GitHub Release with Auto-Generated Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.VERSION }} \
            --draft \
            --title "Release ${{ env.VERSION }}" \
            --generate-notes

  # Job 2: Build, package, and upload binaries as workflow artifacts.
  build_and_package:
    name: Build & Package Assets
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: axes
            asset_ext: tar.xz
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: axes
            asset_ext: tar.xz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: axes.exe
            asset_ext: zip
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      
      - name: Install 7-Zip (Windows)
        if: runner.os == 'Windows'
        run: choco install 7zip

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare package content and names
        id: prep
        shell: bash
        run: |
          VERSION="${{ needs.create_release.outputs.version }}"
          PACKAGE_DIR="axes"
          ASSET_NAME="axes-${VERSION}-${{ matrix.target }}.${{ matrix.asset_ext }}"
          
          echo "PACKAGE_DIR=$PACKAGE_DIR" >> $GITHUB_OUTPUT
          echo "ASSET_NAME=$ASSET_NAME" >> $GITHUB_OUTPUT

          mkdir -p "$PACKAGE_DIR"
          cp "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" "$PACKAGE_DIR/"
          cp LICENSE README.md "$PACKAGE_DIR/"

      - name: Create compressed package
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a -tzip -mx=9 "${{ steps.prep.outputs.ASSET_NAME }}" "${{ steps.prep.outputs.PACKAGE_DIR }}/"
          else
            tar cJf "${{ steps.prep.outputs.ASSET_NAME }}" "${{ steps.prep.outputs.PACKAGE_DIR }}/"
          fi

      - name: Upload package as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ matrix.target }}
          path: ${{ steps.prep.outputs.ASSET_NAME }}

  # Job 3: Finalize the release after all builds are complete.
  finalize_release:
    name: Finalize & Publish Release
    needs: [create_release, build_and_package]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download all packaged assets
        uses: actions/download-artifact@v5
        with:
          path: artifacts/

      - name: Move assets to a single directory
        run: |
          mkdir -p release-assets
          find artifacts -type f -exec mv {} release-assets/ \;

      - name: Generate SHA256 checksums file
        run: |
          cd release-assets
          sha256sum * > ../SHA256SUMS
          cd ..
          echo "Generated SHA256SUMS:"
          cat SHA256SUMS

      - name: Import GPG Signing Key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_BOT_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Sign the SHA256SUMS file with GPG
        run: |
          gpg --batch --pinentry-mode loopback --yes \
              --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              --local-user ${{ secrets.GPG_KEY_ID }} \
              --output "SHA256SUMS.sig" \
              --detach-sign "SHA256SUMS"

      - name: Upload all assets to the release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release upload ${{ needs.create_release.outputs.version }} \
            release-assets/* SHA256SUMS SHA256SUMS.sig \
            --repo ${{ github.repository }} \
            --clobber

      - name: Publish the release (remove draft status)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release edit "${{ needs.create_release.outputs.version }}" --draft=false