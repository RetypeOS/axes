# === Project Metadata ===
# The name 'axes' is inherited from Cargo.toml, but we define it here for clarity as local name.
name = "axes"
version = "0.1.5-Alpha" # Synchronize with Cargo.toml
description = "The development workflow configuration for the `axes` project itself."

# === Development Scripts ===
# Defines workflows for building, testing, and managing the tool.
[commands] # TODO: Rename to [scripts] in a future version.

# --- Build Workflows ---
build = { desc = "Builds the project in debug mode with fast compilation.", run = "cargo build" }
build_release = { desc = "Builds the project in release mode for distribution.", run = "cargo build --release" }

# --- Run and Test Workflows ---
run = { desc = "Runs the project, passing all arguments to the binary.", run = "cargo run -- <axes::params>" }
test = { desc = "Runs all unit and integration tests.", run = "cargo test" }

# --- Code Quality Workflows ---
check = { desc = "Checks the project for errors without building.", run = "cargo check" }
lint = { desc = "Lints the code for style and correctness issues.", run = "cargo clippy <axes::vars::clippy_args>" }
fmt = { desc = "Checks if the code is formatted according to project style.", run = "cargo fmt --all -- --check" }
fmt_fix = { desc = "Formats the code automatically.", run = "cargo fmt --all" }

# --- Composite and Utility Workflows ---
quality = { desc = "Runs all quality checks in sequence (fmt, check, lint, test).", run = [
    "<axes::commands::fmt>",
    "<axes::commands::check>",
    "<axes::commands::lint>",
    "<axes::commands::test>",
]}
doc = { desc = "Builds and opens the project documentation in the browser.", run = "cargo doc --open" }
clean = { desc = "Removes the target directory and build artifacts.", run = "cargo clean" }

# --- Local Installation Workflow ---
[commands.install]
desc = "Builds in release and copies the artifact to a local installation path."
#run = "echo K loko merijein..."
windows = [
    "<axes::commands::build_release>",
    # Uses `xcopy` to create the directory if it doesn't exist and suppress the prompt.
    "xcopy /Y \"<axes::path>\\target\\release\\axes.exe\" \"<axes::vars::install_path_win>\""
]
linux = [
    "<axes::commands::build_release>",
    "install -m 755 -D \"<axes::path>/target/release/axes\" \"<axes::vars::install_path_nix>\""
]
macos = [
    "<axes::commands::build_release>",
    "install -m 755 -D \"<axes::path>/target/release/axes\" \"<axes::vars::install_path_nix>\""
]

# === Interpolation Variables ===
# Reusable values in the scripts.
[vars]
# Standard arguments for clippy to ensure consistency.
clippy_args = "-- -D warnings"

# --- Installation Paths (User Configurable) ---
# NOTE: Change these paths to match a directory in your PATH.
install_path_win = "C:\\scripts\\axes.exe" # Example for Windows
install_path_nix = "/usr/local/bin/" # Example for Linux/macOS

# === Environment Variables ===
# Injected into every command executed by `axes`.
[env]
RUST_LOG = "debug" # Default log level when running with `axes run`.
RUST_BACKTRACE = "1" # Shows full backtraces in case of panic.