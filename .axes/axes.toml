# axes.toml for the 'axes' project
# This file defines the complete development, testing, and release workflow for `axes` itself.
# It is designed to be a best-practice example of a clean and maintainable configuration.

# === Project Metadata ===
# Version is synchronized with Cargo.toml and the application's version output.
version = "0.2.0-beta"
description = "The development workflow configuration for the `axes` project itself."

# === Development Scripts ===
# Defines workflows for building, testing, and managing the tool.
[scripts]

# Rapid Tests for me.
hello = {desc = "Say Hello, World!", run = "echo Hello, World!"}

# --- Core Development Workflows ---
build = { desc = "Builds the project in debug mode with fast compilation.", run = "cargo build <axes::params>" }
build_release = { desc = "Builds the project in release mode for distribution.", run = "cargo build --release" }
run = { desc = "Runs the project, passing all arguments to the binary.", run = "cargo run -- <axes::params>" }
test = { desc = "Runs all unit and integration tests.", run = "cargo test" }

# --- Code Quality ---
check = { desc = "Checks the project for errors without compiling.", run = "cargo check" }
lint = { desc = "Lints the code for style and correctness issues.", run = "cargo clippy <axes::vars::clippy_args> <axes::params>" }
fmt = { desc = "Checks if the code is formatted according to project style.", run = "cargo fmt -- --check <axes::params>" }
fmt_fix = { desc = "Formats the code automatically.", run = "cargo fmt --all <axes::params>" }

# This is a composite script, showcasing the power of `axes` to create complete workflows.
quality = { desc = "Runs all quality checks in sequence (fmt, check, lint, test).", run = [
    "<axes::scripts::fmt>",
    "<axes::scripts::check>",
    "<axes::scripts::lint>",
    "<axes::scripts::test>",
]}

# --- Artifacts & Distribution ---
clean = { desc = "Removes the target directory and build artifacts.", run = "cargo clean <axes::params>" }
doc = { desc = "Builds and opens the project documentation in the browser.", run = "cargo doc --open <axes::params>" }

# Builds and installs the artifact to a local path, showcasing a cross-platform script.
[scripts.install]
desc = "Builds in release and copies the artifact to a local installation path."
windows = [
    "<axes::scripts::build_release>",
    # Use PowerShell for robust path handling and directory creation.
    "powershell -Command \"New-Item -ItemType File -Path '<axes::vars::install_path_win>' -Force | Out-Null; Copy-Item -Path '.\\target\\release\\axes.exe' -Destination '<axes::vars::install_path_win>'\""
]
linux = [
    "<axes::scripts::build_release>",
    "install -m 755 -D \"<axes::path>/target/release/axes\" \"<axes::vars::install_path_nix>\""
]
macos = [
    "<axes::scripts::build_release>",
    "install -m 755 -D \"<axes::path>/target/release/axes\" \"<axes::vars::install_path_nix>\""
]

# --- Performance Analysis ---
# This script generates a flamegraph and then opens it, showcasing a cross-platform sequence.
[scripts.flamegraph]
desc = "Generates a performance flamegraph for a given command and opens the result."
run = [
    "cargo flamegraph --bin axes -- <axes::params>",
    { windows = "start flamegraph.svg", macos = "open flamegraph.svg", linux = "xdg-open flamegraph.svg", default="echo 'Flamegraph generated at flamegraph.svg'" }
]


# === Interpolation Variables ===
# Reusable values for maintaining consistency across scripts.
[vars]
# Standard arguments for clippy to ensure consistency.
clippy_args = "-- -D warnings"

# --- Installation Paths (User Configurable) ---
# By default, install into a local './bin' directory. This is safe and portable.
# A user can override this by creating a `.axes/axes.local.toml` file with:
# [vars]
# install_path_win = "C:\\Users\\user\\bin\\axes.exe"
# install_path_nix = "/home/user/.local/bin/axes"
install_path_win = "<axes::params::0(default='.\\bin\\axes.exe')>" 
install_path_nix = "<axes::params::0(default='./bin/axes')>"
# C:\\scripts\\axes.exe

# === Environment Variables ===
# Injected into every command executed by `axes`.
[env]
RUST_LOG = "info"   # Set a sensible default log level for `axes run`.
RUST_BACKTRACE = "1"  # Always show full backtraces in case of panic.
CARGO_PROFILE_RELEASE_DEBUG = "true" # Enable debug symbols in release builds for better profiling.