# === Project Metadata ===
# The name 'axes' is inherited from Cargo.toml, but we define it here for clarity as local name.
name = "axes"
version = "0.1.5-Alpha" # Synchronize with Cargo.toml
description = "The development workflow configuration for the `axes` project itself."

# === Development Scripts ===
# Defines workflows for building, testing, and managing the tool.
[scripts]
# Tests
hello = """
    echo Hello, World!
"""

test_q = "-comando info <axes::vars::_param_1> <axes::params::1(map='--info', default='algo')>"

test_w = [
    "> echo 1",
    "> echo 2",
    "> echo 3",
    "> echo 4",
    "> echo 5",
    "> echo 6",
    "> echo 7",
    "echo 8",
    "echo 9",
    "> echo 10",
    "> echo 11",
    "> echo 12",
    "> echo 13",
    "echo 14",
    "echo 15",
]

test_complex = ["<axes::scripts::test_w>", "<axes::scripts::test_w>"]

test_rayon = "> echo Running 1"

test_run = "echo algo <axes::run::hello>"

test_vel = "powershell ./.axes/command_test.ps1 '<axes::params>'"

test_run_script = "echo algo: <axes::run('git --version')>"
test_run_script_s = "echo algo: <axes::run::test_rayon>"

# --- Escenario de Error 1: Variable no encontrada en anidamiento profundo ---
deploy_frontend = "-npm run build -- --config <axes::scripts::frontend_config>"
frontend_config = "aaa"
deploy_all = [
    "echo 'Deploying backend...'",
    "<axes::scripts::deploy_frontend>" # Este script depende de una var
]

# --- Escenario de Error 2: Ciclo de dependencias ---
ciclo_a = "echo Paso A, luego <axes::scripts::ciclo_b>"
ciclo_b = "Paso B, luego <axes::scripts::ciclo_c>"
ciclo_c = "Paso C, y de vuelta a <axes::scripts::ciclo_a>"

test_run_cicles = "<axes::run::hello>"

# --- Build Workflows ---
build = { desc = "Builds the project in debug mode with fast compilation.", run = "cargo build <axes::params>" }
build_release = { desc = "Builds the project in release mode for distribution.", run = "cargo build --release" }

# --- Run and Test Workflows ---
run = { desc = "Runs the project, passing all arguments to the binary.", run = "cargo run -- <axes::params>" }
test = { desc = "Runs all unit and integration tests.", run = "cargo test" }

# --- Code Quality Workflows ---
check = { desc = "Checks the project for errors without building.", run = "cargo check" }
lint = { desc = "Lints the code for style and correctness issues.", run = "cargo clippy <axes::vars::clippy_args> <axes::params>" }
fmt = { desc = "Checks if the code is formatted according to project style.", run = "cargo fmt <axes::params>" }
fmt_fix = { desc = "Formats the code automatically.", run = "cargo fmt --all <axes::params>" }
flamegraph = {run=["cargo flamegraph --bin axes -- <axes::params>", "start flamegraph.svg"], desc="{{Missing}}"}

# --- Composite and Utility Workflows ---
quality = { desc = "Runs all quality checks in sequence (fmt, check, lint, test).", run = [
    "<axes::scripts::fmt>",
    "<axes::scripts::check>",
    "<axes::scripts::lint>",
    "<axes::scripts::test>",
]}
doc = { desc = "Builds and opens the project documentation in the browser.", run = "cargo doc --open <axes::params>" }
clean = { desc = "Removes the target directory and build artifacts.", run = "cargo clean <axes::params>" }

# --- Local Installation Workflow ---
_install = [
    "<axes::scripts::build_release>",
    "xcopy /Y \"<axes::path>\\target\\release\\axes.exe\" \"C:\\scripts\\axes.exe\""
]

[scripts.install]
desc = "Builds in release and copies the artifact to a local installation path."
windows = [
    "<axes::scripts::build_release>",
    # Uses `xcopy` to create the directory if it doesn't exist and suppress the prompt.
    "xcopy /Y \"<axes::path>\\target\\release\\axes.exe\" \"<axes::vars::install_path_win>\""
]
linux = [
    "<axes::scripts::build_release>",
    "install -m 755 -D \"<axes::path>/target/release/axes\" \"<axes::vars::install_path_nix>\""
]
macos = [
    "<axes::scripts::build_release>",
    "install -m 755 -D \"<axes::path>/target/release/axes\" \"<axes::vars::install_path_nix>\""
]

# === Interpolation Variables ===
# Reusable values in the scripts.
[vars]
# Standard arguments for clippy to ensure consistency.
clippy_args = "-- -D warnings"
_param_1 = "<axes::params::0(required)>"

# --- Installation Paths (User Configurable) ---
# NOTE: Change these paths to match a directory in your PATH.
install_path_win = "<axes::path>\\axes.exe" # Example for Windows # "C:\\scripts\\axes.exe"
install_path_nix = "/usr/local/bin/" # Example for Linux/macOS

# === Environment Variables ===
# Injected into every command executed by `axes`.
[env]
RUST_LOG = "debug" # Default log level when running with `axes run`.
RUST_BACKTRACE = "1" # Shows full backtraces in case of panic.
CARGO_PROFILE_RELEASE_DEBUG="true"